# es roadmap

## general
### completed
c042ab - fix up code formatting (tabs? spaces? ??)
bd4309 - revert useless changes, properly log changes from "base" es so they don't get lost

### remaining
re-read mailing list
re-host paper and mailing list on site
learn to profile performance (how's the GC looking these days?)
fix known crashes/bugs
 - pathsearch?
 - {=>>x} != {=>{>x}}
 - ctrl-c in a catch/retry loop exits the shell, which seems like wrong behavior

## interactivity
handle multi-line commands correctly (like bash)
readline tab completion
 - functions
 - binaries on `$path`
 - variable names
 - programmability, really

## language
### completed
ff841e - (XS port) `let (a; b)` is a nice shorthand for `let (a = (); b = ())` (may not work with FCEs)
583c03 - try to do `%closure (a = {%closure (b)})` instead of `%closure (a = '%closure (b)')`
85b88a - (XS port) `$li(3 ... 1)` should be equivalent to `$li(3) $li(2) $li(1)`
bd2d73 - (XS port) switch
7176c8 - (XS port) `$&noreturn` => `fn-escape` (if it doesn't need to be a primitive, don't make it one!)

### upcoming
`=>` should be parsed ... better
loops should catch `continue` exceptions and handle them as expected
`a = let (b = c) d` should actually do what it looks like it does (and not explode :))
finish making `=` work correctly
(XS port) `@ $args {$body}` should work
 - finally make `fn-fn = @ name ...` work
(XS port) math expressions? seems useful... and the syntax currently isn't used for anything else useful...
 - this implies removing `$&add` and `$&negate` and the silly functions around them
`$&wait` should really be a wait-any. this would unlock some parallelism that currently isn't (I think) possible

## long-term
first class bindings (FCBs)
 - `let` as a function+primitive
 - `local` as a function+primitive
 - `for` as a function+primitive
 - closure sharing (essentially, closures saved as variables would act as the proposed "tagging" system)
continuation-passing style and tail-call recursion
