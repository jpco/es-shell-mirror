# es roadmap

## general
### completed
c042ab - fix up code formatting (tabs? spaces? ??)
bd4309 - revert useless changes, properly log changes from "base" es so they don't get lost
c36efd - {=>>x} != {=>{>x}}
7c6aad - stop ./configure from adding '-g -O2' to CFLAGS by default?

### remaining
re-read mailing list
re-host paper and mailing list on site
learn to profile performance (how's the GC looking these days?)
 - also learn to profile memory usage
fix known crashes/bugs
 - path cache?
 - ctrl-c in a catch/retry loop exits the shell, which seems like wrong behavior
 - exceptions with GCDEBUG defined cause a segfault
 - test failures
add fuzzing/proper testing
fix esdebug
static es is still a fun idea
we should support *some* level of portability outside of "my personal linuces"
 - with readline, with editline, or neither
 - OS's? linux (apt rpm arch gentoo?) (gcc clang), macOS, BSDs?
 - allow keeping %pass and arithmetic out of the shell

## interactivity
handle multi-line commands correctly (like bash)
readline tab completion
 - msg00039.html -- blargh.
 - correct behavior with quotes
 - complete functions
 - complete binaries on `$path`
 - complete variable names?
 - completion programmability
user-definable history file
 - msg00039.html again!
 - how does this play with "handle multi-line commands correctly"?
%read should utilize readline/editline in interactive settings when appropriate
 - can %read use other delimiters besides \n?

## language
### completed
ff841e - (XS port) `let (a; b)` is a nice shorthand for `let (a = (); b = ())` (may not work with FCBs)
583c03 - try to do `%closure (a = {%closure (b)})` instead of `%closure (a = '%closure (b)')`
85b88a - (XS port) `$li(3 ... 1)` should be equivalent to `$li(3) $li(2) $li(1)`
bd2d73 - (XS port) switch
7176c8 - (XS port) `$&noreturn` => `fn-escape` (if it doesn't need to be a primitive, don't make it one!)
2eaefd - loops should catch `continue` exceptions and handle them as expected
012b31 - (XS port) math expressions

### upcoming
`=>` should be parsed ... better
`a = let (b = c) d` should actually do what it looks like it does (and not explode :))
finish making `=` work correctly
(XS port) `@ $args {$body}` should work
 - finally make `fn-fn = @ name ...` work
    - remember the `@ a b c %closure (a=b) {$body}` problem
`$&wait` should really be a wait-any. this would unlock some parallelism that currently isn't (I think) possible
how do we set up "throw exception on non-zero status" in the repl?  I feel like %dispatch needs rethinking
we want: `echo {let (x) y}` === `echo {let (x=) y}` === `echo {let (x=()) y}`
potentially $&echo is just `write(1, ...)` and echo does the -- and -n interpretation?
msg00416.html?
we need to handle recursive structures better
  - re current semantics of let: msg00433.html

## long-term
first class bindings (FCBs)
 - `let` as a function+primitive
 - `local` as a function+primitive
 - `for` as a function+primitive
    - msg00196.html -- primitives can't do lexical bindings -- think about this
 - closure sharing (essentially, closures saved as variables would act as the proposed "tagging" system)
continuation-passing style and tail-call recursion
decouple "core language" parsing (parse.y) from the "extension syntax"
 - (syntax to remove: !, `, ``, $#, $^, &&, ||, ;, &, |, =>, heredocs?, arithmetic?, redirections)
 - is this macros? do macros enable lexical-binding "primitives"? do I need to learn scheme?
    - extend-syntax? msg00198.html
