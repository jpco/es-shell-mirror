Preface
-------

This is a personal extension of es.  There are a few ways this differs
from the 'canonical' es:

 - (Many cases of) embedded '=' in arguments result in no syntax error.
   This is ongoing; the optimal behavior is a bit sophisticated.

 - $&background is gone, renamed to $&fork; the old definition of 
   $&fork has been removed; same with %background and %fork.  The old
   function 'fork' has been renamed 'subshell'.  The rationale here
   is to have variants on 'fork' for non-blocking semantics, and
   'subshell' for blocking semantics.

 - The precedence of '$$foo(1)' is no longer equivalent to '$($a(1))'.

 - Two new primitives, $&add and $&negate, and two new functions, %+ and
   %-, for basic arithmetic.

 - 'a | b | c' now executes 'c' in the local shell, rather than a subshell.
   This is a bit awkward in terms of return values, since a pipeline of n
   commands now returns a list of length potentially more than n, but that's
   the price you pay, I guess.

 - Added '%pass' and syntax 'a => b', equivalent to 'b <={a}'.
   This is a warm-up to CPS and tail call optimization.

Still to do:

 - Related to 'pass':
    - Do not append '$pass' if '$pass' is already present

 - `echo a b | {cat | rev}` echoes the correct output, but also echoes
   `wait: <PID> is not a child of this shell`

 - Programmable tab completion (iff readline is linked in).

 - A proper unit- and regression-testing suite.

 - Interactive features, potentially?

 - Proper tail recursion (or more general tail call optimization).

 - First-class environments. (equivalent to associative arrays? awkward)

README
------

Es is an extensible shell.  The language was derived from the Plan 9
shell, rc, and was influenced by functional programming languages,
such as Scheme, and the Tcl embeddable programming language.  This
implementation is derived from Byron Rakitzis's public domain
implementation of rc.

See the INSTALL file for installation instructions. Once it's running
have a look at the manual page and the docs and examples directories,
in particular Haahr & Rakitzis's paper: ``Es: a shell with higher-order
functions.'' The paper corresponds to a slightly older version of the
shell;  see the file ERRATA for changes which affect parts of the paper.

The file initial.es, which is used to build the initial memory state of
the es interpreter, can be read to better understand how pieces of the
shell interact.

The official ftp site (associated with the original authors) is at:

    ftp://ftp.sys.utoronto.ca/pub/es

but all of the relevant information is mirrored in the repository and/or
the website:

    http://www.github.com/wryun/es-shell
    http://wryun.github.com/es-shell

including the change history and the old mailing list archives.

An old version of Paul's .esrc (es startup) file is provided as an
example as esrc.haahr; correctness is not guaranteed.  A simple
debugger for es scripts, esdebug, is also included; this is very
untested and should be considered little more than a sketch of a few
ideas.

Copyright
---------

Es is in the public domain.  We hold no copyrights or patents on
the source code, and do not place any restrictions on its distribution.
We would appreciate it if any distributions do credit the authors.

Enjoy!

-- Paul Haahr & Byron Rakitzis

Maintenance by:
- Soren Dayton (0.9beta1)
- James Haggerty (post 0.9beta1)
